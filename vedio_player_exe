import sys
import os
import hashlib
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout,
                             QHBoxLayout, QLabel, QLineEdit, QPushButton,
                             QMessageBox, QSlider, QComboBox, QStyle)
from PyQt5.QtMultimedia import QMediaContent, QMediaPlayer
from PyQt5.QtMultimediaWidgets import QVideoWidget
from PyQt5.QtCore import Qt, QUrl, QTime, QTimer
from PyQt5.QtGui import QFont, QIcon, QPixmap


def generate_password_hash(password):
    return hashlib.sha256(password.encode('utf-8')).hexdigest()


class PasswordWindow(QWidget):
    def __init__(self, correct_password_hash, parent=None):
        super().__init__(parent)
        self.correct_password_hash = correct_password_hash
        self.initUI()

    def get_resource_path(self, relative_path):
        """获取资源的正确路径（兼容开发环境和打包后）"""
        if hasattr(sys, '_MEIPASS'):  # 打包后运行
            base_path = sys._MEIPASS
        else:  # 开发环境运行
            base_path = os.path.abspath(".")
        return os.path.join(base_path, relative_path)

    def initUI(self):
        self.setWindowTitle('密码验证')
        self.setGeometry(0, 0, int(3840 / 4), int(2160 / 4 + 50))
        self.setWindowFlags(Qt.FramelessWindowHint)

        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(0, 0, 0, 0)

        self.background_label = QLabel(self)
        self.background_label.setScaledContents(True)
        self.update_background()
        main_layout.addWidget(self.background_label)

        password_layout = QHBoxLayout()
        password_layout.setContentsMargins(20, 20, 20, 20)
        password_layout.setAlignment(Qt.AlignCenter)

        password_label = QLabel('密码:')
        password_label.setFont(QFont('SimHei', 10))
        password_label.setStyleSheet("color: rgba(125, 125, 125, 1); background: transparent;")
        password_layout.addWidget(password_label)

        self.password_input = QLineEdit()
        self.password_input.setFont(QFont('SimHei', 10))
        self.password_input.setEchoMode(QLineEdit.Password)
        self.password_input.setStyleSheet("""
            QLineEdit {
                background: rgba(255, 255, 255, 0.1); 
                border: 1px solid rgba(0, 0, 0, 0.1);
                border-radius: 3px;
                padding: 3px;
                min-width: 150px;
                color: #333;
            }
        """)
        password_layout.addWidget(self.password_input)

        self.submit_button = QPushButton('确认')
        self.submit_button.setFont(QFont('SimHei', 10))
        self.submit_button.setFixedHeight(30)
        self.submit_button.setStyleSheet("""
            QPushButton {
                background-color: rgba(255, 0, 0, 0.4); 
                color: #333;
                border-radius: 3px;
                border: 1px solid rgba(0, 0, 0, 0.1);
                min-width: 60px;
            }
            QPushButton:hover {
                background-color: rgba(0, 255, 0, 1);
            }
            QPushButton:pressed {
                background-color: rgba(0, 0, 255, 0.7);
            }
        """)
        self.submit_button.clicked.connect(self.check_password)
        self.password_input.returnPressed.connect(self.check_password)
        password_layout.addWidget(self.submit_button)

        main_layout.addLayout(password_layout)

    def resizeEvent(self, event):
        self.update_background()

    def update_background(self):
        # 使用 get_resource_path 获取图片路径
        pixmap = QPixmap(self.get_resource_path("HU7.jpg"))
        if not pixmap.isNull():
            scaled_pixmap = pixmap.scaled(self.size(), Qt.KeepAspectRatioByExpanding, Qt.SmoothTransformation)
            self.background_label.setPixmap(scaled_pixmap)

    def check_password(self):
        password = self.password_input.text()
        input_hash = generate_password_hash(password)
        if input_hash == self.correct_password_hash:
            self.accept()
        else:
            QMessageBox.warning(self, '密码错误', '密码不正确，请重新输入！')
            self.password_input.clear()

    def accept(self):
        self.hide()
        if self.parent():
            self.parent().show_video_window()


class FixedZoomVideoWidget(QWidget):
    def __init__(self, zoom_factor=1.25, parent=None):
        super().__init__(parent)
        self.zoom_factor = zoom_factor
        self.video_widget = QVideoWidget(self)
        self.setStyleSheet("background-color: black;")
        self.resize(800, 600)

    def set_media_player(self, player):
        player.setVideoOutput(self.video_widget)

    def resizeEvent(self, event):
        self.update_video_geometry()

    def update_video_geometry(self):
        if not self.video_widget:
            return
        container_width = self.width()
        container_height = self.height()
        zoomed_width = int(container_width * self.zoom_factor)
        zoomed_height = int(container_height * self.zoom_factor)
        x = (container_width - zoomed_width) // 2
        y = (container_height - zoomed_height) // 2
        self.video_widget.setGeometry(x, y, zoomed_width, zoomed_height)


class VideoPlayer(QMainWindow):
    def __init__(self, video_path, password_hash):
        super().__init__()
        self.video_path = self.get_resource_path(video_path)
        self.password_hash = password_hash
        self.loop_timer = QTimer(self)
        self.loop_timer.timeout.connect(self.check_playback_position)
        self.loop_timer.start(100)
        self.initUI()

    def get_resource_path(self, relative_path):
        if hasattr(sys, '_MEIPASS'):
            return os.path.join(sys._MEIPASS, relative_path)
        return os.path.join(os.path.abspath('.'), relative_path)

    def initUI(self):
        self.setWindowTitle('微醺不醉')
        self.setGeometry(100, 100, 800, 600)
        self.setMinimumSize(960, 480)

        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.main_layout = QVBoxLayout(self.central_widget)

        self.password_window = PasswordWindow(self.password_hash, self)
        self.password_window.show()

        self.mediaPlayer = QMediaPlayer(None, QMediaPlayer.VideoSurface)
        self.mediaPlayer.setVolume(70)

        self.video_container = FixedZoomVideoWidget(zoom_factor=1.25)
        self.video_container.set_media_player(self.mediaPlayer)

        self.create_control_widgets()

        self.main_layout.addWidget(self.video_container, stretch=1)
        self.main_layout.addWidget(self.control_widget)

        self.mediaPlayer.stateChanged.connect(self.mediaStateChanged)
        self.mediaPlayer.error.connect(self.handle_error)
        self.mediaPlayer.positionChanged.connect(self.position_changed)
        self.mediaPlayer.durationChanged.connect(self.duration_changed)
        self.mediaPlayer.mediaStatusChanged.connect(self.media_status_changed)

        self.video_container.hide()
        self.control_widget.hide()

    def create_control_widgets(self):
        self.control_widget = QWidget()
        self.control_layout = QHBoxLayout(self.control_widget)
        self.control_layout.setContentsMargins(5, 5, 5, 5)
        self.control_layout.setAlignment(Qt.AlignLeft)

        self.time_layout = QHBoxLayout()
        self.current_time_label = QLabel("00:00")
        self.total_time_label = QLabel("00:00")
        self.time_slider = QSlider(Qt.Horizontal)
        self.time_slider.setRange(0, 0)
        self.time_slider.sliderMoved.connect(self.set_position)

        self.time_layout.addWidget(self.current_time_label)
        self.time_layout.addWidget(self.time_slider)
        self.time_layout.addWidget(self.total_time_label)

        self.play_button = QPushButton()
        self.play_button.setIcon(self.style().standardIcon(QStyle.SP_MediaPlay))
        self.play_button.setEnabled(False)
        self.play_button.clicked.connect(self.play)

        self.speed_label = QLabel("速度:")
        self.speed_combo = QComboBox()
        self.speed_combo.addItems(["0.8x", "1.0x", "1.25x", "1.5x", "2.0x"])
        self.speed_combo.setCurrentText("1.0x")
        self.speed_combo.currentTextChanged.connect(self.set_playback_speed)

        self.fullscreen_button = QPushButton()
        self.fullscreen_button.setIcon(self.style().standardIcon(QStyle.SP_TitleBarMaxButton))
        self.fullscreen_button.clicked.connect(self.toggle_fullscreen)

        self.control_layout.addLayout(self.time_layout)
        self.control_layout.addWidget(self.play_button)
        self.control_layout.addWidget(self.speed_label)
        self.control_layout.addWidget(self.speed_combo)
        self.control_layout.addWidget(self.fullscreen_button)

    def show_video_window(self):
        if not os.path.exists(self.video_path):
            QMessageBox.critical(self, "错误", f"视频文件不存在: {self.video_path}")
            return

        self.mediaPlayer.setMedia(QMediaContent(QUrl.fromLocalFile(self.video_path)))
        if self.mediaPlayer.error() != QMediaPlayer.NoError:
            QMessageBox.critical(self, "错误", f"媒体错误: {self.mediaPlayer.errorString()}")
            return

        self.play_button.setEnabled(True)
        self.password_window.hide()
        self.video_container.show()
        self.control_widget.show()
        self.play()

    def play(self):
        if self.mediaPlayer.state() == QMediaPlayer.PlayingState:
            self.mediaPlayer.pause()
        else:
            self.mediaPlayer.play()

    def toggle_fullscreen(self):
        if self.isFullScreen():
            self.showNormal()
            self.fullscreen_button.setIcon(self.style().standardIcon(QStyle.SP_TitleBarMaxButton))
        else:
            self.showFullScreen()
            self.fullscreen_button.setIcon(self.style().standardIcon(QStyle.SP_TitleBarNormalButton))

    def set_playback_speed(self, speed_text):
        speed_map = {"0.8x": 0.8, "1.0x": 1.0, "1.25x": 1.25, "1.5x": 1.5, "2.0x": 2.0}
        self.mediaPlayer.setPlaybackRate(speed_map.get(speed_text, 1.0))

    def position_changed(self, position):
        self.time_slider.setValue(position)
        self.update_time_labels(position, self.mediaPlayer.duration())

    def duration_changed(self, duration):
        self.time_slider.setRange(0, duration)
        self.update_time_labels(self.mediaPlayer.position(), duration)

    def set_position(self, position):
        self.mediaPlayer.setPosition(position)

    def update_time_labels(self, current, total):
        current_time = QTime(0, 0).addMSecs(current)
        total_time = QTime(0, 0).addMSecs(total)
        self.current_time_label.setText(current_time.toString("mm:ss"))
        self.total_time_label.setText(total_time.toString("mm:ss"))

    def media_status_changed(self, status):
        if status == QMediaPlayer.LoadedMedia:
            self.video_width = self.mediaPlayer.videoWidth()
            self.video_height = self.mediaPlayer.videoHeight()

    def check_playback_position(self):
        if self.mediaPlayer.duration() > 0:
            current = self.mediaPlayer.position()
            duration = self.mediaPlayer.duration()
            if duration - current < 500:
                self.mediaPlayer.setPosition(0)

    def mediaStateChanged(self, state):
        self.play_button.setIcon(
            self.style().standardIcon(QStyle.SP_MediaPause) if state == QMediaPlayer.PlayingState
            else self.style().standardIcon(QStyle.SP_MediaPlay)
        )

    def handle_error(self):
        error_msg = f"播放错误: {self.mediaPlayer.errorString()}"
        QMessageBox.critical(self, "错误", error_msg)
        self.mediaPlayer.setMedia(QMediaContent(QUrl.fromLocalFile(self.video_path)))
        self.mediaPlayer.play()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    app.setApplicationName("微醺不醉")

    icon_path = "YU7.ico"
    if getattr(sys, 'frozen', False):
        icon_path = os.path.join(sys._MEIPASS, icon_path)
    app.setWindowIcon(QIcon(icon_path))

    video_path = "79.mp4"
    password = "520659"
    password_hash = generate_password_hash(password)

    player = VideoPlayer(video_path, password_hash)
    player.show()
    sys.exit(app.exec_())
